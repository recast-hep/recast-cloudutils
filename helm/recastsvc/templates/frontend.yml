apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: frontend
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: recast/frontend:{{.Values.ImageTags.frontend_server}}
        imagePullPolicy: {{.Values.ImagePullPolicy }}
        command: ['recast-frontend','server']
        {{ if eq .Values.ResourceRequirements true}}
        resources:
          requests:
            cpu: "0.5"
        {{ end }}
        ports:
          - containerPort: 5001
            name: http
        {{ if eq .Values.HostPorts true}}
            hostPort: 443
        {{ end }}
        volumeMounts:
          - name: ssl
            mountPath: /secrets/ssl
            readOnly: true
        env:
          - name: RECAST_FRONTEND_PORT
            value: '5001'
          - name: RECAST_ORCID_REDIRECT_URI
            value: 'https://{{ .Values.DNS.frontend_server }}/login'
          - name: RECAST_ORCID_TOKEN_REDIRECT_URI
            value: https://{{ .Values.DNS.frontend_server }}/token'
          - name: RECAST_SSL_CERT
            value: /secrets/ssl/server.crt
          - name: RECAST_SSL_KEY
            value: /secrets/ssl/server.key
          - name: RECAST_DBPATH
            value: 'postgres://postgres:postgres@{{ .Values.services.database }}'
          - name: RECAST_MASTERTOKEN
            valueFrom:
              secretKeyRef:
                name: frontend-config
                key: mastertoken
          - name: RECAST_AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: frontend-aws
                key: keyid
          - name: RECAST_AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: frontend-aws
                key: secret
          - name: RECAST_AWS_S3_BUCKET_NAME
            valueFrom:
              secretKeyRef:
                name: frontend-aws
                key: bucket
          - name: RECAST_ORCID_APPID
            valueFrom:
              secretKeyRef:
                name: frontend-oauth
                key: app_id
          - name: RECAST_ORCID_SECRET
            valueFrom:
              secretKeyRef:
                name: frontend-oauth
                key: secret
          - name: RECAST_REDISURL
            value: {{ .Values.services.msgqueue }}
      - name: api
        image: recast/frontend-rest-server:{{.Values.ImageTags.frontend_rest_server}}
        imagePullPolicy: {{.Values.ImagePullPolicy }}
        command: ['bash','-c','sleep 10 && recast-api server']
        {{ if eq .Values.ResourceRequirements true}}
        resources:
          requests:
            cpu: "0.5"
        {{ end }}
        env:
          - name: RECAST_DBPATH
            value: 'postgres://postgres:postgres@{{ .Values.services.database }}'
          - name: RECAST_SSL_CERT
            value: /secrets/ssl/server.crt
          - name: RECAST_SSL_KEY
            value: /secrets/ssl/server.key
          - name: RECAST_ORCID_APPID
            valueFrom:
              secretKeyRef:
                name: frontend-oauth
                key: app_id
          - name: RECAST_ORCID_SECRET
            valueFrom:
              secretKeyRef:
                name: frontend-oauth
                key: secret
          - name: RECAST_MASTERTOKEN
            valueFrom:
              secretKeyRef:
                name: frontend-config
                key: mastertoken
          - name: RECAST_AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: frontend-aws
                key: keyid
          - name: RECAST_AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: frontend-aws
                key: secret
          - name: RECAST_AWS_S3_BUCKET_NAME
            valueFrom:
              secretKeyRef:
                name: frontend-aws
                key: bucket
        volumeMounts:
          - name: ssl
            mountPath: /secrets/ssl
            readOnly: true
        ports:
          - containerPort: 5000
            name: rest
        {{ if eq .Values.HostPorts true}}
            hostPort: 8443
        {{ end }}
      volumes:
      - name: ssl
        secret:
          secretName: frontend-ssl
      - name: data
        persistentVolumeClaim:
          claimName: {{ .Values.frontendclaim }}
      {{ if eq .Values.NodeAffinity true}}
      nodeSelector:
        role: frontendnode
      {{ end }}
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: 5001
    nodePort: 30443
    name: webserver
    protocol: TCP
  - port: 81
    targetPort: 5000
    nodePort: 30444
    name: restapi
    protocol: TCP
  selector:
    app: frontend
